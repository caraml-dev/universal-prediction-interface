{
  "swagger": "2.0",
  "info": {
    "title": "caraml/upi/v1/upi.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "UniversalPredictionService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/predict": {
      "post": {
        "operationId": "UniversalPredictionService_PredictValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PredictValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PredictValuesRequest"
            }
          }
        ],
        "tags": [
          "UniversalPredictionService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "upiv1Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DOUBLE",
        "TYPE_INTEGER",
        "TYPE_STRING"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_DOUBLE: Double precision floating number (64-bit)\n - TYPE_INTEGER: 64-bit Integer\n - TYPE_STRING: String",
      "title": "Type supported by UPI"
    },
    "v1Column": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Column's name"
        },
        "type": {
          "$ref": "#/definitions/upiv1Type",
          "title": "Column's type"
        }
      },
      "title": "Column represent a column definition within a table"
    },
    "v1ModelMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Model name that produce prediction"
        },
        "version": {
          "type": "string",
          "title": "Model version that produce prediction"
        }
      }
    },
    "v1PredictValuesRequest": {
      "type": "object",
      "properties": {
        "predictionTable": {
          "$ref": "#/definitions/v1Table",
          "description": "Prediction table contains instances to be predicted.\nEach row in the table correspond to one prediction instance.\nPrediction table should contain all preprocessed feature that model use to perform prediction.\nThe column ordering in the prediction table must be the same as feature order expected by model in the case of standard model.\nPrediction table can be populated via 3 ways:\n- By performing preprocessing in the client-side and sent as part of original request.\n- By transforming feature values stored in transformer_inputs.\n- By retrieving precomputed feature value from feature store. \nRow ID of the prediction_table must be populated by the client and can be used\nto join a row in prediction_table with another row in the prediction_result_table,\nand to track predictions generated by multiple models.\nThe user is expected to include row ID (along with prediction ID)\nwhen calling the observations API so that predictions\nand observations can be joined. \nNOTE: the ordering of rows might differ in the response but the number of row must remain the same."
        },
        "transformerInput": {
          "$ref": "#/definitions/v1TransformerInput",
          "description": "Transformer input contains list of tables and variables that can be used to enrich prediction_table using transformer.\nTypically transformer_inputs contains:\n- unprocessed/raw features that requires further transformation. \n- list of entities for which their precomputed features are retrieved from feature store using standard transformer."
        },
        "targetName": {
          "type": "string",
          "title": "Name of the concept we wish to predict.\nFor example in context of iris classification problem it can be \"iris-species\""
        },
        "predictionContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Variable"
          },
          "title": "Prediction context may contain additional data applicable to all prediction instances\nFor example it can be used to store information for traffic rules, experimentation\nor tracking purposes.\nEg. country_code, service_type, service_area_id"
        },
        "metadata": {
          "$ref": "#/definitions/v1RequestMetadata",
          "title": "Request metadata"
        }
      },
      "title": "Represents a request to predict multiple values"
    },
    "v1PredictValuesResponse": {
      "type": "object",
      "properties": {
        "predictionResultTable": {
          "$ref": "#/definitions/v1Table",
          "title": "Prediction results corresponding to the\nprediction rows provided in the request. \nNOTE: the ordering of prediction_result_rows might differ with prediction_table in the request but the number of row must match with the prediction_table"
        },
        "targetName": {
          "type": "string",
          "title": "Target name as defined in the request metadata"
        },
        "predictionContexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Variable"
          },
          "title": "Extensible field to cover unforeseen requirements"
        },
        "metadata": {
          "$ref": "#/definitions/v1ResponseMetadata",
          "title": "Response metadata"
        }
      }
    },
    "v1RequestMetadata": {
      "type": "object",
      "properties": {
        "predictionId": {
          "type": "string",
          "title": "Unique identifier for each request. Optional.\nPrediction ID will generated by the platform. The user is expected\ninclude the prediction ID (along with row ID) when calling\nthe observations API so that predictions and observations can be joined.\nPrediction ID is needed because row ID may not be globally unique\nacross requests (only locally unique within each request).\nIf there are experiments with alternative models, the mapping\nfrom prediciton ID to treatment ID will be logged by the platform"
        },
        "requestTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp of the request"
        }
      }
    },
    "v1ResponseMetadata": {
      "type": "object",
      "properties": {
        "predictionId": {
          "type": "string",
          "title": "Prediction ID generated by the platform. \nThe user is expected include the prediction ID (along with row ID) when calling\nthe observations API so that predictions and observations can be joined.\nPrediction ID is needed because row ID may not be globally unique\nacross requests (only locally unique within each request).\nIf there are experiments with alternative models, the mapping\nfrom prediciton ID to treatment ID will be logged by the platform"
        },
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ModelMetadata"
          },
          "title": "List of model that produces the prediction \nThis field is repeated to cater for use case such as ensembling several model production results"
        },
        "experimentId": {
          "type": "string",
          "title": "Optional experimentation metadata"
        },
        "treatmentId": {
          "type": "string"
        }
      }
    },
    "v1Row": {
      "type": "object",
      "properties": {
        "rowId": {
          "type": "string",
          "title": "Id of the particular row in a table.\nThe row id should be at least locally unique within the table.\nRow ID must be populated for prediction_table"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Value"
          },
          "description": "List of values within a row. \nIt is table's creator responsibility to ensure that the number of entry \nvalues matches with the length of columns in the table."
        }
      },
      "title": "Row represents list of value stored within a row of a table"
    },
    "v1Table": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Table's name"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Column"
          },
          "description": "Columns stores schema informations of all columns in the table."
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Row"
          },
          "description": "Rows stores list of row values in the table."
        }
      },
      "title": "Table represents a 2D data structure that has one or more columns \nwith potentially different types"
    },
    "v1TransformerInput": {
      "type": "object",
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Table"
          },
          "description": "List of tables\nAll tables must have unique name.\nEach table doesn't need to have same number of row."
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Variable"
          },
          "title": "List of variables"
        }
      },
      "description": "Transformer input contains additional information that can be used to enrich prediction_table using standard transformer.\nAll tables and variables within transformer input will be imported to the standard transformer runtime automatically."
    },
    "v1Value": {
      "type": "object",
      "properties": {
        "doubleValue": {
          "type": "number",
          "format": "double",
          "title": "One of following field will be set depending on the column's type"
        },
        "integerValue": {
          "type": "string",
          "format": "int64"
        },
        "stringValue": {
          "type": "string"
        },
        "isNull": {
          "type": "boolean",
          "title": "Flag to be used to signify that the value is null"
        }
      },
      "description": "Value of a cell within a table. Value is nullable."
    },
    "v1Variable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name describing what the value represents.\nUses include:\n- Ensuring ML models process columns in the correct order\n- Defining a Feast row entity name\n- Parsing metadata to apply traffic rules"
        },
        "type": {
          "$ref": "#/definitions/upiv1Type",
          "title": "Type of the variable"
        },
        "doubleValue": {
          "type": "number",
          "format": "double",
          "title": "One of the following field will be set depending on the type"
        },
        "integerValue": {
          "type": "string",
          "format": "int64"
        },
        "stringValue": {
          "type": "string"
        }
      },
      "title": "Represents a named and typed data point.\nCan be used as a prediction input, output or metadata.\nOneof types are avoided as these can be difficult to handle"
    }
  }
}
