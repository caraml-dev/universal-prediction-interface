// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: caraml/upi/v1/observation_log.proto

package upiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObservationServiceClient is the client API for ObservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObservationServiceClient interface {
	LogObservations(ctx context.Context, in *LogObservationsRequest, opts ...grpc.CallOption) (*LogObservationsResponse, error)
}

type observationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObservationServiceClient(cc grpc.ClientConnInterface) ObservationServiceClient {
	return &observationServiceClient{cc}
}

func (c *observationServiceClient) LogObservations(ctx context.Context, in *LogObservationsRequest, opts ...grpc.CallOption) (*LogObservationsResponse, error) {
	out := new(LogObservationsResponse)
	err := c.cc.Invoke(ctx, "/caraml.upi.v1.ObservationService/LogObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObservationServiceServer is the server API for ObservationService service.
// All implementations should embed UnimplementedObservationServiceServer
// for forward compatibility
type ObservationServiceServer interface {
	LogObservations(context.Context, *LogObservationsRequest) (*LogObservationsResponse, error)
}

// UnimplementedObservationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObservationServiceServer struct {
}

func (UnimplementedObservationServiceServer) LogObservations(context.Context, *LogObservationsRequest) (*LogObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogObservations not implemented")
}

// UnsafeObservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObservationServiceServer will
// result in compilation errors.
type UnsafeObservationServiceServer interface {
	mustEmbedUnimplementedObservationServiceServer()
}

func RegisterObservationServiceServer(s grpc.ServiceRegistrar, srv ObservationServiceServer) {
	s.RegisterService(&ObservationService_ServiceDesc, srv)
}

func _ObservationService_LogObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservationServiceServer).LogObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.upi.v1.ObservationService/LogObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservationServiceServer).LogObservations(ctx, req.(*LogObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObservationService_ServiceDesc is the grpc.ServiceDesc for ObservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caraml.upi.v1.ObservationService",
	HandlerType: (*ObservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogObservations",
			Handler:    _ObservationService_LogObservations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caraml/upi/v1/observation_log.proto",
}
