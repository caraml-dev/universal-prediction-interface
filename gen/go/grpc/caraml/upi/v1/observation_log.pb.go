// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: caraml/upi/v1/observation_log.proto

package upiv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ObservationLogKey contains necessary values for generating unique records for
// downstream usages, eg. Dataset Generation Service
type ObservationLogKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id to uniquely identify records from a batch of observation logs
	ObservationBatchId string `protobuf:"bytes,1,opt,name=observation_batch_id,json=observationBatchId,proto3" json:"observation_batch_id,omitempty"`
	// Unique identifier of a prediction response returned by prediction service.
	// This information is used to join the prediction to an observation.
	PredictionId string `protobuf:"bytes,2,opt,name=prediction_id,json=predictionId,proto3" json:"prediction_id,omitempty"`
	// Prediction requests may contain multiple prediction instances.
	// The row_id identifies a particular prediction instance that was used to produce an observation.
	// This information is used to join the prediction to an observation.
	RowId string `protobuf:"bytes,3,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
}

func (x *ObservationLogKey) Reset() {
	*x = ObservationLogKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationLogKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationLogKey) ProtoMessage() {}

func (x *ObservationLogKey) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationLogKey.ProtoReflect.Descriptor instead.
func (*ObservationLogKey) Descriptor() ([]byte, []int) {
	return file_caraml_upi_v1_observation_log_proto_rawDescGZIP(), []int{0}
}

func (x *ObservationLogKey) GetObservationBatchId() string {
	if x != nil {
		return x.ObservationBatchId
	}
	return ""
}

func (x *ObservationLogKey) GetPredictionId() string {
	if x != nil {
		return x.PredictionId
	}
	return ""
}

func (x *ObservationLogKey) GetRowId() string {
	if x != nil {
		return x.RowId
	}
	return ""
}

// ObservationLog represents ground truth signals to be combined
// with the prediction log produced by CaraML prediction service
// to form data sets used for training ML models
type ObservationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of a prediction response returned by prediction service.
	// This information is used to join the prediction to an observation.
	PredictionId string `protobuf:"bytes,1,opt,name=prediction_id,json=predictionId,proto3" json:"prediction_id,omitempty"`
	// Prediction requests may contain multiple prediction instances.
	// The row_id identifies a particular prediction instance that was used to produce an observation.
	// This information is used to join the prediction to an observation.
	RowId string `protobuf:"bytes,2,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	// The name of the observation target. This information is used to join the prediction to an observation.
	TargetName string `protobuf:"bytes,3,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
	// The ground-truth value. It can be a double, string or integer type.
	ObservationValues []*Variable `protobuf:"bytes,4,rep,name=observation_values,json=observationValues,proto3" json:"observation_values,omitempty"`
	// A set of key-value pairs to provide additional context for the observation.
	ObservationContext []*Variable `protobuf:"bytes,5,rep,name=observation_context,json=observationContext,proto3" json:"observation_context,omitempty"`
	// Timestamp when the observation is made
	ObservationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=observation_timestamp,json=observationTimestamp,proto3" json:"observation_timestamp,omitempty"`
}

func (x *ObservationLog) Reset() {
	*x = ObservationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationLog) ProtoMessage() {}

func (x *ObservationLog) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationLog.ProtoReflect.Descriptor instead.
func (*ObservationLog) Descriptor() ([]byte, []int) {
	return file_caraml_upi_v1_observation_log_proto_rawDescGZIP(), []int{1}
}

func (x *ObservationLog) GetPredictionId() string {
	if x != nil {
		return x.PredictionId
	}
	return ""
}

func (x *ObservationLog) GetRowId() string {
	if x != nil {
		return x.RowId
	}
	return ""
}

func (x *ObservationLog) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *ObservationLog) GetObservationValues() []*Variable {
	if x != nil {
		return x.ObservationValues
	}
	return nil
}

func (x *ObservationLog) GetObservationContext() []*Variable {
	if x != nil {
		return x.ObservationContext
	}
	return nil
}

func (x *ObservationLog) GetObservationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ObservationTimestamp
	}
	return nil
}

type LogObservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of observations per request
	Observations []*ObservationLog `protobuf:"bytes,1,rep,name=observations,proto3" json:"observations,omitempty"`
}

func (x *LogObservationsRequest) Reset() {
	*x = LogObservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogObservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogObservationsRequest) ProtoMessage() {}

func (x *LogObservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogObservationsRequest.ProtoReflect.Descriptor instead.
func (*LogObservationsRequest) Descriptor() ([]byte, []int) {
	return file_caraml_upi_v1_observation_log_proto_rawDescGZIP(), []int{2}
}

func (x *LogObservationsRequest) GetObservations() []*ObservationLog {
	if x != nil {
		return x.Observations
	}
	return nil
}

type LogObservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier to identify records from a batch of observation logs
	ObservationBatchId string `protobuf:"bytes,1,opt,name=observation_batch_id,json=observationBatchId,proto3" json:"observation_batch_id,omitempty"`
}

func (x *LogObservationsResponse) Reset() {
	*x = LogObservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogObservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogObservationsResponse) ProtoMessage() {}

func (x *LogObservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_upi_v1_observation_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogObservationsResponse.ProtoReflect.Descriptor instead.
func (*LogObservationsResponse) Descriptor() ([]byte, []int) {
	return file_caraml_upi_v1_observation_log_proto_rawDescGZIP(), []int{3}
}

func (x *LogObservationsResponse) GetObservationBatchId() string {
	if x != nil {
		return x.ObservationBatchId
	}
	return ""
}

var File_caraml_upi_v1_observation_log_proto protoreflect.FileDescriptor

var file_caraml_upi_v1_observation_log_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x75, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x75, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x75, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x75, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72,
	0x61, 0x6d, 0x6c, 0x2e, 0x75, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5b, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d,
	0x6c, 0x2e, 0x75, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x32, 0x97, 0x01, 0x0a, 0x12, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x4c, 0x6f,
	0x67, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x75, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x75, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67,
	0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xcf, 0x01, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x75, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x42, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x64, 0x65, 0x76,
	0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x75, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x3b, 0x75, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x55, 0x58,
	0xaa, 0x02, 0x0d, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x55, 0x70, 0x69, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0d, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x5c, 0x55, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x19, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x5c, 0x55, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x43,
	0x61, 0x72, 0x61, 0x6d, 0x6c, 0x3a, 0x3a, 0x55, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_caraml_upi_v1_observation_log_proto_rawDescOnce sync.Once
	file_caraml_upi_v1_observation_log_proto_rawDescData = file_caraml_upi_v1_observation_log_proto_rawDesc
)

func file_caraml_upi_v1_observation_log_proto_rawDescGZIP() []byte {
	file_caraml_upi_v1_observation_log_proto_rawDescOnce.Do(func() {
		file_caraml_upi_v1_observation_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_caraml_upi_v1_observation_log_proto_rawDescData)
	})
	return file_caraml_upi_v1_observation_log_proto_rawDescData
}

var file_caraml_upi_v1_observation_log_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_caraml_upi_v1_observation_log_proto_goTypes = []interface{}{
	(*ObservationLogKey)(nil),       // 0: caraml.upi.v1.ObservationLogKey
	(*ObservationLog)(nil),          // 1: caraml.upi.v1.ObservationLog
	(*LogObservationsRequest)(nil),  // 2: caraml.upi.v1.LogObservationsRequest
	(*LogObservationsResponse)(nil), // 3: caraml.upi.v1.LogObservationsResponse
	(*Variable)(nil),                // 4: caraml.upi.v1.Variable
	(*timestamppb.Timestamp)(nil),   // 5: google.protobuf.Timestamp
}
var file_caraml_upi_v1_observation_log_proto_depIdxs = []int32{
	4, // 0: caraml.upi.v1.ObservationLog.observation_values:type_name -> caraml.upi.v1.Variable
	4, // 1: caraml.upi.v1.ObservationLog.observation_context:type_name -> caraml.upi.v1.Variable
	5, // 2: caraml.upi.v1.ObservationLog.observation_timestamp:type_name -> google.protobuf.Timestamp
	1, // 3: caraml.upi.v1.LogObservationsRequest.observations:type_name -> caraml.upi.v1.ObservationLog
	2, // 4: caraml.upi.v1.ObservationService.LogObservations:input_type -> caraml.upi.v1.LogObservationsRequest
	3, // 5: caraml.upi.v1.ObservationService.LogObservations:output_type -> caraml.upi.v1.LogObservationsResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_caraml_upi_v1_observation_log_proto_init() }
func file_caraml_upi_v1_observation_log_proto_init() {
	if File_caraml_upi_v1_observation_log_proto != nil {
		return
	}
	file_caraml_upi_v1_variable_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_caraml_upi_v1_observation_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationLogKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_upi_v1_observation_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_upi_v1_observation_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogObservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_upi_v1_observation_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogObservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_caraml_upi_v1_observation_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_caraml_upi_v1_observation_log_proto_goTypes,
		DependencyIndexes: file_caraml_upi_v1_observation_log_proto_depIdxs,
		MessageInfos:      file_caraml_upi_v1_observation_log_proto_msgTypes,
	}.Build()
	File_caraml_upi_v1_observation_log_proto = out.File
	file_caraml_upi_v1_observation_log_proto_rawDesc = nil
	file_caraml_upi_v1_observation_log_proto_goTypes = nil
	file_caraml_upi_v1_observation_log_proto_depIdxs = nil
}
