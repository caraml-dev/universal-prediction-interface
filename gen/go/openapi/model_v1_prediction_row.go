/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1PredictionRow struct for V1PredictionRow
type V1PredictionRow struct {
	// Row ID is defined by the client and can be used to join a prediction row with the prediction result, and to track predictions generated by multiple models. The user is expected include row ID (along with prediction ID) when calling the observations API so that predictions and observations can be joined.
	RowId *string `json:"rowId,omitempty"`
	// Model inputs contain all preprocessed feature that model use to perform prediction. The feature ordering in model_inputs must be the same as feature order expected by model.  Model inputs can be populated via 3 ways: - By performing preprocessing in the client-side and sent as part of original request. - By transforming raw feature values stored in transformer_inputs. - By retrieving precomputed feature value from feature store.
	ModelInputs []V1NamedValue `json:"modelInputs,omitempty"`
	// Transformer input contains raw values that can be used to enrich model_inputs using transformer. Typically transformer_inputs contains: - unprocessed/raw features that requires further processing.  - list of entities for which their precomputed features are retrieved from feature store.
	TransformerInputs []V1NamedValue `json:"transformerInputs,omitempty"`
}

// NewV1PredictionRow instantiates a new V1PredictionRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PredictionRow() *V1PredictionRow {
	this := V1PredictionRow{}
	return &this
}

// NewV1PredictionRowWithDefaults instantiates a new V1PredictionRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PredictionRowWithDefaults() *V1PredictionRow {
	this := V1PredictionRow{}
	return &this
}

// GetRowId returns the RowId field value if set, zero value otherwise.
func (o *V1PredictionRow) GetRowId() string {
	if o == nil || o.RowId == nil {
		var ret string
		return ret
	}
	return *o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PredictionRow) GetRowIdOk() (*string, bool) {
	if o == nil || o.RowId == nil {
		return nil, false
	}
	return o.RowId, true
}

// HasRowId returns a boolean if a field has been set.
func (o *V1PredictionRow) HasRowId() bool {
	if o != nil && o.RowId != nil {
		return true
	}

	return false
}

// SetRowId gets a reference to the given string and assigns it to the RowId field.
func (o *V1PredictionRow) SetRowId(v string) {
	o.RowId = &v
}

// GetModelInputs returns the ModelInputs field value if set, zero value otherwise.
func (o *V1PredictionRow) GetModelInputs() []V1NamedValue {
	if o == nil || o.ModelInputs == nil {
		var ret []V1NamedValue
		return ret
	}
	return o.ModelInputs
}

// GetModelInputsOk returns a tuple with the ModelInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PredictionRow) GetModelInputsOk() ([]V1NamedValue, bool) {
	if o == nil || o.ModelInputs == nil {
		return nil, false
	}
	return o.ModelInputs, true
}

// HasModelInputs returns a boolean if a field has been set.
func (o *V1PredictionRow) HasModelInputs() bool {
	if o != nil && o.ModelInputs != nil {
		return true
	}

	return false
}

// SetModelInputs gets a reference to the given []V1NamedValue and assigns it to the ModelInputs field.
func (o *V1PredictionRow) SetModelInputs(v []V1NamedValue) {
	o.ModelInputs = v
}

// GetTransformerInputs returns the TransformerInputs field value if set, zero value otherwise.
func (o *V1PredictionRow) GetTransformerInputs() []V1NamedValue {
	if o == nil || o.TransformerInputs == nil {
		var ret []V1NamedValue
		return ret
	}
	return o.TransformerInputs
}

// GetTransformerInputsOk returns a tuple with the TransformerInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PredictionRow) GetTransformerInputsOk() ([]V1NamedValue, bool) {
	if o == nil || o.TransformerInputs == nil {
		return nil, false
	}
	return o.TransformerInputs, true
}

// HasTransformerInputs returns a boolean if a field has been set.
func (o *V1PredictionRow) HasTransformerInputs() bool {
	if o != nil && o.TransformerInputs != nil {
		return true
	}

	return false
}

// SetTransformerInputs gets a reference to the given []V1NamedValue and assigns it to the TransformerInputs field.
func (o *V1PredictionRow) SetTransformerInputs(v []V1NamedValue) {
	o.TransformerInputs = v
}

func (o V1PredictionRow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RowId != nil {
		toSerialize["rowId"] = o.RowId
	}
	if o.ModelInputs != nil {
		toSerialize["modelInputs"] = o.ModelInputs
	}
	if o.TransformerInputs != nil {
		toSerialize["transformerInputs"] = o.TransformerInputs
	}
	return json.Marshal(toSerialize)
}

type NullableV1PredictionRow struct {
	value *V1PredictionRow
	isSet bool
}

func (v NullableV1PredictionRow) Get() *V1PredictionRow {
	return v.value
}

func (v *NullableV1PredictionRow) Set(val *V1PredictionRow) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PredictionRow) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PredictionRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PredictionRow(val *V1PredictionRow) *NullableV1PredictionRow {
	return &NullableV1PredictionRow{value: val, isSet: true}
}

func (v NullableV1PredictionRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PredictionRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


