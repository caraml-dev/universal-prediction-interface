/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1Column struct for V1Column
type V1Column struct {
	Name *string `json:"name,omitempty"`
	Type *Upiv1Type `json:"type,omitempty"`
}

// NewV1Column instantiates a new V1Column object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Column() *V1Column {
	this := V1Column{}
	var type_ Upiv1Type = UPIV1TYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewV1ColumnWithDefaults instantiates a new V1Column object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ColumnWithDefaults() *V1Column {
	this := V1Column{}
	var type_ Upiv1Type = UPIV1TYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Column) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Column) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Column) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Column) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1Column) GetType() Upiv1Type {
	if o == nil || o.Type == nil {
		var ret Upiv1Type
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Column) GetTypeOk() (*Upiv1Type, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1Column) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given Upiv1Type and assigns it to the Type field.
func (o *V1Column) SetType(v Upiv1Type) {
	o.Type = &v
}

func (o V1Column) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableV1Column struct {
	value *V1Column
	isSet bool
}

func (v NullableV1Column) Get() *V1Column {
	return v.value
}

func (v *NullableV1Column) Set(val *V1Column) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Column) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Column) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Column(val *V1Column) *NullableV1Column {
	return &NullableV1Column{value: val, isSet: true}
}

func (v NullableV1Column) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Column) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


