/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1Value Value of a cell within a table. Value is nullable.
type V1Value struct {
	DoubleValue *float64 `json:"doubleValue,omitempty"`
	IntegerValue *string `json:"integerValue,omitempty"`
	StringValue *string `json:"stringValue,omitempty"`
	IsNull *bool `json:"isNull,omitempty"`
}

// NewV1Value instantiates a new V1Value object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Value() *V1Value {
	this := V1Value{}
	return &this
}

// NewV1ValueWithDefaults instantiates a new V1Value object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ValueWithDefaults() *V1Value {
	this := V1Value{}
	return &this
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise.
func (o *V1Value) GetDoubleValue() float64 {
	if o == nil || o.DoubleValue == nil {
		var ret float64
		return ret
	}
	return *o.DoubleValue
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Value) GetDoubleValueOk() (*float64, bool) {
	if o == nil || o.DoubleValue == nil {
		return nil, false
	}
	return o.DoubleValue, true
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *V1Value) HasDoubleValue() bool {
	if o != nil && o.DoubleValue != nil {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given float64 and assigns it to the DoubleValue field.
func (o *V1Value) SetDoubleValue(v float64) {
	o.DoubleValue = &v
}

// GetIntegerValue returns the IntegerValue field value if set, zero value otherwise.
func (o *V1Value) GetIntegerValue() string {
	if o == nil || o.IntegerValue == nil {
		var ret string
		return ret
	}
	return *o.IntegerValue
}

// GetIntegerValueOk returns a tuple with the IntegerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Value) GetIntegerValueOk() (*string, bool) {
	if o == nil || o.IntegerValue == nil {
		return nil, false
	}
	return o.IntegerValue, true
}

// HasIntegerValue returns a boolean if a field has been set.
func (o *V1Value) HasIntegerValue() bool {
	if o != nil && o.IntegerValue != nil {
		return true
	}

	return false
}

// SetIntegerValue gets a reference to the given string and assigns it to the IntegerValue field.
func (o *V1Value) SetIntegerValue(v string) {
	o.IntegerValue = &v
}

// GetStringValue returns the StringValue field value if set, zero value otherwise.
func (o *V1Value) GetStringValue() string {
	if o == nil || o.StringValue == nil {
		var ret string
		return ret
	}
	return *o.StringValue
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Value) GetStringValueOk() (*string, bool) {
	if o == nil || o.StringValue == nil {
		return nil, false
	}
	return o.StringValue, true
}

// HasStringValue returns a boolean if a field has been set.
func (o *V1Value) HasStringValue() bool {
	if o != nil && o.StringValue != nil {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given string and assigns it to the StringValue field.
func (o *V1Value) SetStringValue(v string) {
	o.StringValue = &v
}

// GetIsNull returns the IsNull field value if set, zero value otherwise.
func (o *V1Value) GetIsNull() bool {
	if o == nil || o.IsNull == nil {
		var ret bool
		return ret
	}
	return *o.IsNull
}

// GetIsNullOk returns a tuple with the IsNull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Value) GetIsNullOk() (*bool, bool) {
	if o == nil || o.IsNull == nil {
		return nil, false
	}
	return o.IsNull, true
}

// HasIsNull returns a boolean if a field has been set.
func (o *V1Value) HasIsNull() bool {
	if o != nil && o.IsNull != nil {
		return true
	}

	return false
}

// SetIsNull gets a reference to the given bool and assigns it to the IsNull field.
func (o *V1Value) SetIsNull(v bool) {
	o.IsNull = &v
}

func (o V1Value) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DoubleValue != nil {
		toSerialize["doubleValue"] = o.DoubleValue
	}
	if o.IntegerValue != nil {
		toSerialize["integerValue"] = o.IntegerValue
	}
	if o.StringValue != nil {
		toSerialize["stringValue"] = o.StringValue
	}
	if o.IsNull != nil {
		toSerialize["isNull"] = o.IsNull
	}
	return json.Marshal(toSerialize)
}

type NullableV1Value struct {
	value *V1Value
	isSet bool
}

func (v NullableV1Value) Get() *V1Value {
	return v.value
}

func (v *NullableV1Value) Set(val *V1Value) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Value) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Value) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Value(val *V1Value) *NullableV1Value {
	return &NullableV1Value{value: val, isSet: true}
}

func (v NullableV1Value) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Value) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


