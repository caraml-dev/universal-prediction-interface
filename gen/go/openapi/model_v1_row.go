/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1Row struct for V1Row
type V1Row struct {
	RowId *string `json:"rowId,omitempty"`
	// List of values within a row.  It is table's creator responsibility to ensure that the number of entry  values matches with the length of columns in the table.
	Values []Upiv1Value `json:"values,omitempty"`
}

// NewV1Row instantiates a new V1Row object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Row() *V1Row {
	this := V1Row{}
	return &this
}

// NewV1RowWithDefaults instantiates a new V1Row object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RowWithDefaults() *V1Row {
	this := V1Row{}
	return &this
}

// GetRowId returns the RowId field value if set, zero value otherwise.
func (o *V1Row) GetRowId() string {
	if o == nil || o.RowId == nil {
		var ret string
		return ret
	}
	return *o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Row) GetRowIdOk() (*string, bool) {
	if o == nil || o.RowId == nil {
		return nil, false
	}
	return o.RowId, true
}

// HasRowId returns a boolean if a field has been set.
func (o *V1Row) HasRowId() bool {
	if o != nil && o.RowId != nil {
		return true
	}

	return false
}

// SetRowId gets a reference to the given string and assigns it to the RowId field.
func (o *V1Row) SetRowId(v string) {
	o.RowId = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *V1Row) GetValues() []Upiv1Value {
	if o == nil || o.Values == nil {
		var ret []Upiv1Value
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Row) GetValuesOk() ([]Upiv1Value, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *V1Row) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []Upiv1Value and assigns it to the Values field.
func (o *V1Row) SetValues(v []Upiv1Value) {
	o.Values = v
}

func (o V1Row) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RowId != nil {
		toSerialize["rowId"] = o.RowId
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableV1Row struct {
	value *V1Row
	isSet bool
}

func (v NullableV1Row) Get() *V1Row {
	return v.value
}

func (v *NullableV1Row) Set(val *V1Row) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Row) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Row) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Row(val *V1Row) *NullableV1Row {
	return &NullableV1Row{value: val, isSet: true}
}

func (v NullableV1Row) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Row) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


