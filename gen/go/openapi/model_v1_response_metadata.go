/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ResponseMetadata struct for V1ResponseMetadata
type V1ResponseMetadata struct {
	PredictionId *string `json:"predictionId,omitempty"`
	Models []V1ModelMetadata `json:"models,omitempty"`
	ExperimentId *string `json:"experimentId,omitempty"`
	TreatmentId *string `json:"treatmentId,omitempty"`
}

// NewV1ResponseMetadata instantiates a new V1ResponseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ResponseMetadata() *V1ResponseMetadata {
	this := V1ResponseMetadata{}
	return &this
}

// NewV1ResponseMetadataWithDefaults instantiates a new V1ResponseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ResponseMetadataWithDefaults() *V1ResponseMetadata {
	this := V1ResponseMetadata{}
	return &this
}

// GetPredictionId returns the PredictionId field value if set, zero value otherwise.
func (o *V1ResponseMetadata) GetPredictionId() string {
	if o == nil || o.PredictionId == nil {
		var ret string
		return ret
	}
	return *o.PredictionId
}

// GetPredictionIdOk returns a tuple with the PredictionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResponseMetadata) GetPredictionIdOk() (*string, bool) {
	if o == nil || o.PredictionId == nil {
		return nil, false
	}
	return o.PredictionId, true
}

// HasPredictionId returns a boolean if a field has been set.
func (o *V1ResponseMetadata) HasPredictionId() bool {
	if o != nil && o.PredictionId != nil {
		return true
	}

	return false
}

// SetPredictionId gets a reference to the given string and assigns it to the PredictionId field.
func (o *V1ResponseMetadata) SetPredictionId(v string) {
	o.PredictionId = &v
}

// GetModels returns the Models field value if set, zero value otherwise.
func (o *V1ResponseMetadata) GetModels() []V1ModelMetadata {
	if o == nil || o.Models == nil {
		var ret []V1ModelMetadata
		return ret
	}
	return o.Models
}

// GetModelsOk returns a tuple with the Models field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResponseMetadata) GetModelsOk() ([]V1ModelMetadata, bool) {
	if o == nil || o.Models == nil {
		return nil, false
	}
	return o.Models, true
}

// HasModels returns a boolean if a field has been set.
func (o *V1ResponseMetadata) HasModels() bool {
	if o != nil && o.Models != nil {
		return true
	}

	return false
}

// SetModels gets a reference to the given []V1ModelMetadata and assigns it to the Models field.
func (o *V1ResponseMetadata) SetModels(v []V1ModelMetadata) {
	o.Models = v
}

// GetExperimentId returns the ExperimentId field value if set, zero value otherwise.
func (o *V1ResponseMetadata) GetExperimentId() string {
	if o == nil || o.ExperimentId == nil {
		var ret string
		return ret
	}
	return *o.ExperimentId
}

// GetExperimentIdOk returns a tuple with the ExperimentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResponseMetadata) GetExperimentIdOk() (*string, bool) {
	if o == nil || o.ExperimentId == nil {
		return nil, false
	}
	return o.ExperimentId, true
}

// HasExperimentId returns a boolean if a field has been set.
func (o *V1ResponseMetadata) HasExperimentId() bool {
	if o != nil && o.ExperimentId != nil {
		return true
	}

	return false
}

// SetExperimentId gets a reference to the given string and assigns it to the ExperimentId field.
func (o *V1ResponseMetadata) SetExperimentId(v string) {
	o.ExperimentId = &v
}

// GetTreatmentId returns the TreatmentId field value if set, zero value otherwise.
func (o *V1ResponseMetadata) GetTreatmentId() string {
	if o == nil || o.TreatmentId == nil {
		var ret string
		return ret
	}
	return *o.TreatmentId
}

// GetTreatmentIdOk returns a tuple with the TreatmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResponseMetadata) GetTreatmentIdOk() (*string, bool) {
	if o == nil || o.TreatmentId == nil {
		return nil, false
	}
	return o.TreatmentId, true
}

// HasTreatmentId returns a boolean if a field has been set.
func (o *V1ResponseMetadata) HasTreatmentId() bool {
	if o != nil && o.TreatmentId != nil {
		return true
	}

	return false
}

// SetTreatmentId gets a reference to the given string and assigns it to the TreatmentId field.
func (o *V1ResponseMetadata) SetTreatmentId(v string) {
	o.TreatmentId = &v
}

func (o V1ResponseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PredictionId != nil {
		toSerialize["predictionId"] = o.PredictionId
	}
	if o.Models != nil {
		toSerialize["models"] = o.Models
	}
	if o.ExperimentId != nil {
		toSerialize["experimentId"] = o.ExperimentId
	}
	if o.TreatmentId != nil {
		toSerialize["treatmentId"] = o.TreatmentId
	}
	return json.Marshal(toSerialize)
}

type NullableV1ResponseMetadata struct {
	value *V1ResponseMetadata
	isSet bool
}

func (v NullableV1ResponseMetadata) Get() *V1ResponseMetadata {
	return v.value
}

func (v *NullableV1ResponseMetadata) Set(val *V1ResponseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ResponseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ResponseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ResponseMetadata(val *V1ResponseMetadata) *NullableV1ResponseMetadata {
	return &NullableV1ResponseMetadata{value: val, isSet: true}
}

func (v NullableV1ResponseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ResponseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


