/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Upiv1Type - TYPE_UNSPECIFIED: Unspecified type  - TYPE_DOUBLE: Double precision floating number (64-bit)  - TYPE_INTEGER: 64-bit Integer  - TYPE_STRING: String
type Upiv1Type string

// List of upiv1Type
const (
	UPIV1TYPE_UNSPECIFIED Upiv1Type = "TYPE_UNSPECIFIED"
	UPIV1TYPE_DOUBLE Upiv1Type = "TYPE_DOUBLE"
	UPIV1TYPE_INTEGER Upiv1Type = "TYPE_INTEGER"
	UPIV1TYPE_STRING Upiv1Type = "TYPE_STRING"
)

// All allowed values of Upiv1Type enum
var AllowedUpiv1TypeEnumValues = []Upiv1Type{
	"TYPE_UNSPECIFIED",
	"TYPE_DOUBLE",
	"TYPE_INTEGER",
	"TYPE_STRING",
}

func (v *Upiv1Type) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Upiv1Type(value)
	for _, existing := range AllowedUpiv1TypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Upiv1Type", value)
}

// NewUpiv1TypeFromValue returns a pointer to a valid Upiv1Type
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpiv1TypeFromValue(v string) (*Upiv1Type, error) {
	ev := Upiv1Type(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Upiv1Type: valid values are %v", v, AllowedUpiv1TypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Upiv1Type) IsValid() bool {
	for _, existing := range AllowedUpiv1TypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to upiv1Type value
func (v Upiv1Type) Ptr() *Upiv1Type {
	return &v
}

type NullableUpiv1Type struct {
	value *Upiv1Type
	isSet bool
}

func (v NullableUpiv1Type) Get() *Upiv1Type {
	return v.value
}

func (v *NullableUpiv1Type) Set(val *Upiv1Type) {
	v.value = val
	v.isSet = true
}

func (v NullableUpiv1Type) IsSet() bool {
	return v.isSet
}

func (v *NullableUpiv1Type) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpiv1Type(val *Upiv1Type) *NullableUpiv1Type {
	return &NullableUpiv1Type{value: val, isSet: true}
}

func (v NullableUpiv1Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpiv1Type) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

