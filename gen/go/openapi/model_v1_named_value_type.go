/*
caraml/upi/v1/upi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1NamedValueType the model 'V1NamedValueType'
type V1NamedValueType string

// List of v1NamedValueType
const (
	V1NAMEDVALUETYPE_UNSPECIFIED V1NamedValueType = "TYPE_UNSPECIFIED"
	V1NAMEDVALUETYPE_DOUBLE V1NamedValueType = "TYPE_DOUBLE"
	V1NAMEDVALUETYPE_INTEGER V1NamedValueType = "TYPE_INTEGER"
	V1NAMEDVALUETYPE_STRING V1NamedValueType = "TYPE_STRING"
)

// All allowed values of V1NamedValueType enum
var AllowedV1NamedValueTypeEnumValues = []V1NamedValueType{
	"TYPE_UNSPECIFIED",
	"TYPE_DOUBLE",
	"TYPE_INTEGER",
	"TYPE_STRING",
}

func (v *V1NamedValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1NamedValueType(value)
	for _, existing := range AllowedV1NamedValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1NamedValueType", value)
}

// NewV1NamedValueTypeFromValue returns a pointer to a valid V1NamedValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1NamedValueTypeFromValue(v string) (*V1NamedValueType, error) {
	ev := V1NamedValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1NamedValueType: valid values are %v", v, AllowedV1NamedValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1NamedValueType) IsValid() bool {
	for _, existing := range AllowedV1NamedValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1NamedValueType value
func (v V1NamedValueType) Ptr() *V1NamedValueType {
	return &v
}

type NullableV1NamedValueType struct {
	value *V1NamedValueType
	isSet bool
}

func (v NullableV1NamedValueType) Get() *V1NamedValueType {
	return v.value
}

func (v *NullableV1NamedValueType) Set(val *V1NamedValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NamedValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NamedValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NamedValueType(val *V1NamedValueType) *NullableV1NamedValueType {
	return &NullableV1NamedValueType{value: val, isSet: true}
}

func (v NullableV1NamedValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NamedValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

