"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import caraml.upi.v1.value_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class PredictValuesRequest(google.protobuf.message.Message):
    """Represents a request to predict multiple values"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PREDICTION_ROWS_FIELD_NUMBER: builtins.int
    TARGET_NAME_FIELD_NUMBER: builtins.int
    PREDICTION_CONTEXT_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def prediction_rows(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PredictionRow]:
        """Collection of prediction instances to be predicted.
        Each prediction row correspond to one prediction instance.
        NOTE: the ordering of prediction_rows might differ with prediction_result_rows in the response
        """
        pass
    target_name: typing.Text
    """Name of the concept we wish to predict.
    For example in context of iris classification problem it can be "iris-species"
    """

    @property
    def prediction_context(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[caraml.upi.v1.value_pb2.NamedValue]:
        """Prediction context may contain additional data applicable to all prediction instances
        For example it can be used to store information for traffic rules, experimentation
        or tracking purposes.
        Eg. country_code, service_type, service_area_id
        """
        pass
    @property
    def metadata(self) -> global___RequestMetadata: ...
    def __init__(self,
        *,
        prediction_rows: typing.Optional[typing.Iterable[global___PredictionRow]] = ...,
        target_name: typing.Text = ...,
        prediction_context: typing.Optional[typing.Iterable[caraml.upi.v1.value_pb2.NamedValue]] = ...,
        metadata: typing.Optional[global___RequestMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata",b"metadata","prediction_context",b"prediction_context","prediction_rows",b"prediction_rows","target_name",b"target_name"]) -> None: ...
global___PredictValuesRequest = PredictValuesRequest

class RequestMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PREDICTION_ID_FIELD_NUMBER: builtins.int
    REQUEST_TIMESTAMP_FIELD_NUMBER: builtins.int
    prediction_id: typing.Text
    """Unique identifier for each request. Optional.
    Prediction ID will generated by the platform. The user is expected
    include the prediction ID (along with row ID) when calling
    the observations API so that predictions and observations can be joined.
    Prediction ID is needed because row ID may not be globally unique
    across requests (only locally unique within each request).
    If there are experiments with alternative models, the mapping
    from prediciton ID to treatment ID will be logged by the platform
    """

    @property
    def request_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp of the request"""
        pass
    def __init__(self,
        *,
        prediction_id: typing.Text = ...,
        request_timestamp: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["request_timestamp",b"request_timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["prediction_id",b"prediction_id","request_timestamp",b"request_timestamp"]) -> None: ...
global___RequestMetadata = RequestMetadata

class PredictionRow(google.protobuf.message.Message):
    """Represents an single instance we wish to predict.
    Eg. for Matchmaking a prediction row will typically
    correspond to a proposed driver plan
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ROW_ID_FIELD_NUMBER: builtins.int
    MODEL_INPUTS_FIELD_NUMBER: builtins.int
    TRANSFORMER_INPUTS_FIELD_NUMBER: builtins.int
    row_id: typing.Text
    """Row ID is defined by the client and can be used
    to join a prediction row with the prediction result,
    and to track predictions generated by multiple models.
    The user is expected include row ID (along with prediction ID)
    when calling the observations API so that predictions
    and observations can be joined.
    """

    @property
    def model_inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[caraml.upi.v1.value_pb2.NamedValue]:
        """Model inputs contain all preprocessed feature that model use to perform prediction.
        The feature ordering in model_inputs must be the same as feature order expected by model. 
        Model inputs can be populated via 3 ways:
        - By performing preprocessing in the client-side and sent as part of original request.
        - By transforming raw feature values stored in transformer_inputs.
        - By retrieving precomputed feature value from feature store.
        """
        pass
    @property
    def transformer_inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[caraml.upi.v1.value_pb2.NamedValue]:
        """Transformer input contains raw values that can be used to enrich model_inputs using transformer.
        Typically transformer_inputs contains:
        - unprocessed/raw features that requires further processing. 
        - list of entities for which their precomputed features are retrieved from feature store.
        """
        pass
    def __init__(self,
        *,
        row_id: typing.Text = ...,
        model_inputs: typing.Optional[typing.Iterable[caraml.upi.v1.value_pb2.NamedValue]] = ...,
        transformer_inputs: typing.Optional[typing.Iterable[caraml.upi.v1.value_pb2.NamedValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["model_inputs",b"model_inputs","row_id",b"row_id","transformer_inputs",b"transformer_inputs"]) -> None: ...
global___PredictionRow = PredictionRow

class PredictValuesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PREDICTION_RESULT_ROWS_FIELD_NUMBER: builtins.int
    TARGET_NAME_FIELD_NUMBER: builtins.int
    PREDICTION_CONTEXT_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def prediction_result_rows(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PredictionResultRow]:
        """Prediction results corresponding to the
        prediction rows provided in the request. 
        NOTE: the ordering of prediction_result_rows might differ with prediction_rows in the request
        """
        pass
    target_name: typing.Text
    """Target name as defined in the request metadata"""

    @property
    def prediction_context(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[caraml.upi.v1.value_pb2.NamedValue]:
        """Extensible field to cover unforeseen requirements"""
        pass
    @property
    def metadata(self) -> global___ResponseMetadata:
        """Response metadata"""
        pass
    def __init__(self,
        *,
        prediction_result_rows: typing.Optional[typing.Iterable[global___PredictionResultRow]] = ...,
        target_name: typing.Text = ...,
        prediction_context: typing.Optional[typing.Iterable[caraml.upi.v1.value_pb2.NamedValue]] = ...,
        metadata: typing.Optional[global___ResponseMetadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata",b"metadata","prediction_context",b"prediction_context","prediction_result_rows",b"prediction_result_rows","target_name",b"target_name"]) -> None: ...
global___PredictValuesResponse = PredictValuesResponse

class PredictionResultRow(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ROW_ID_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    row_id: typing.Text
    """Row ID defined by the caller used to join a prediction result with a prediction row"""

    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[caraml.upi.v1.value_pb2.NamedValue]:
        """Represents the predicted values corresponding to a 
        single prediction row. This will often be the output of an ML model.
        This field is repeated to support multi-task models with non-scalar outputs
        """
        pass
    def __init__(self,
        *,
        row_id: typing.Text = ...,
        values: typing.Optional[typing.Iterable[caraml.upi.v1.value_pb2.NamedValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["row_id",b"row_id","values",b"values"]) -> None: ...
global___PredictionResultRow = PredictionResultRow

class ResponseMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PREDICTION_ID_FIELD_NUMBER: builtins.int
    MODELS_FIELD_NUMBER: builtins.int
    EXPERIMENT_ID_FIELD_NUMBER: builtins.int
    TREATMENT_ID_FIELD_NUMBER: builtins.int
    prediction_id: typing.Text
    """Prediction ID generated by the platform. 
    The user is expected include the prediction ID (along with row ID) when calling
    the observations API so that predictions and observations can be joined.
    Prediction ID is needed because row ID may not be globally unique
    across requests (only locally unique within each request).
    If there are experiments with alternative models, the mapping
    from prediciton ID to treatment ID will be logged by the platform
    """

    @property
    def models(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelMetadata]:
        """List of model that produces the prediction 
        This field is repeated to cater for use case such as ensembling several model production results
        """
        pass
    experiment_id: typing.Text
    """Optional experimentation metadata"""

    treatment_id: typing.Text
    def __init__(self,
        *,
        prediction_id: typing.Text = ...,
        models: typing.Optional[typing.Iterable[global___ModelMetadata]] = ...,
        experiment_id: typing.Text = ...,
        treatment_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["experiment_id",b"experiment_id","models",b"models","prediction_id",b"prediction_id","treatment_id",b"treatment_id"]) -> None: ...
global___ResponseMetadata = ResponseMetadata

class ModelMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Model name that produce prediction"""

    version: typing.Text
    """Model version that produce prediction"""

    def __init__(self,
        *,
        name: typing.Text = ...,
        version: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","version",b"version"]) -> None: ...
global___ModelMetadata = ModelMetadata
